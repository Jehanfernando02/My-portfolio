export interface Project {
  id: number
  title: string
  description: string
  image: string
  category: string
  details: string
  technologies: string[]
  liveLink?: string
  githubLink?: string
  features: string[]
  challenges: string[]
  learnings: string[]

}

export const projects: Project[] = [
  {
    id: 1,
    title: "Imperial Fit",
    description:
      "Imperial Fit is a modern fitness platform that offers personalized workout plans, progress tracking, and an integrated e-commerce section for gym essentials, providing a complete solution for fitness enthusiasts.",
    image: "/assets/imperialFit.png",
    category: "Individual Projects",
    details:
      "Imperial Fit is a comprehensive fitness platform designed to help users achieve their health and wellness goals. It offers personalized workout plans tailored to different fitness levels, progress tracking, and an integrated e-commerce section for gym products such as apparel, accessories, and supplements. The platform also focuses on building a supportive community with motivational content, making it easier for users to stay on track and motivated. With a user-friendly interface, Imperial Fit provides everything needed to improve fitness and purchase essential gym gear in one convenient place.",
    technologies: [
      "ReactJS",
      "Vite",
      "JSX",
      "CSS",
      "React Router v6",
      "React Context API",
      "Node.js",
      "Express.js",
      "MongoDB",
      "Mongoose",
      "JSON Web Tokens (JWT)",
      "Clerk",
      "CORS",
      "Middleware",
      "RESTful API",
      "CRUD operations",
      "JWT Authentication",
    ],
    features: [
      "Personalized workout plan generation based on fitness level",
      "Progress tracking with detailed analytics and charts",
      "E-commerce integration for gym products and supplements",
      "User authentication and authorization with Clerk",
      "Responsive design optimized for all devices",
      "Community features for user interaction and motivation",
      "Secure payment processing for e-commerce transactions",
    ],
    challenges: [
      "Implementing complex workout plan algorithms for different fitness levels",
      "Integrating secure payment processing with multiple payment gateways",
      "Optimizing database queries for large datasets and user analytics",
      "Creating an intuitive and engaging user experience across all features",
      "Implementing real-time features for community interaction",
      "Ensuring data security and privacy compliance",
    ],
    learnings: [
      "Advanced React patterns including Context API and custom hooks",
      "Full-stack development with Node.js and Express.js",
      "Database design and optimization with MongoDB and Mongoose",
      "Authentication and authorization implementation with JWT",
      "Payment gateway integration and security best practices",
      "Responsive design principles and mobile-first development",
      "API design and RESTful architecture principles",
      "User experience design and interface optimization",
    ],
    liveLink: "https://imperial-fit.vercel.app/",
    githubLink: "https://github.com/Jehanfernando02/Imperial-Fit",
  },
  {
    id: 2,
    title: "Dream Space",
    description:
      "A modern property search application with advanced filtering, detailed property pages, and Google Maps integration.",
    image: "/assets/dream.png",
    category: "Individual Projects",
    details:
      "Dream Space simplifies property discovery with filterable searches, high-quality images, floor plans, and interactive Google Maps integration. The application provides a seamless experience for users looking to find their perfect home with advanced search capabilities and detailed property information.",
    technologies: [
      "React",
      "Google Maps API",
      "React Router",
      "CSS (Flexbox, Grid)",
      "JSON Data Handling",
      "UI Libraries",
    ],
    features: [
      "Advanced property filtering by price, location, and amenities",
      "Interactive Google Maps integration with property markers",
      "High-quality image galleries with lightbox functionality",
      "Detailed property information pages with floor plans",
      "Responsive design for optimal mobile experience",
      "Search and bookmark functionality for favorite properties",
      "Property comparison feature",
      "Contact forms for property inquiries",
    ],
    challenges: [
      "Integrating Google Maps API effectively with custom markers",
      "Implementing complex filtering logic with multiple parameters",
      "Optimizing image loading performance for property galleries",
      "Creating smooth and intuitive navigation between property listings",
      "Handling large datasets of property information efficiently",
      "Ensuring cross-browser compatibility for map features",
    ],
    learnings: [
      "Google Maps API integration and customization",
      "Advanced React component architecture and state management",
      "CSS Grid and Flexbox for complex responsive layouts",
      "Performance optimization techniques for image-heavy applications",
      "JSON data manipulation and filtering algorithms",
      "User interface design principles for search applications",
      "API integration and data fetching best practices",
      "Mobile-first responsive design implementation",
    ],
    liveLink: "https://dream-space-chi.vercel.app/",
    githubLink: "https://github.com/Jehanfernando02/DreamSpace",
  },
  {
    id: 3,
    title: "We Neighbour",
    description:
      "A digital platform designed to enhance communication, security, and engagement in apartment communities.",
    image: "/assets/neighb.png",
    category: "Group Projects",
    details:
      "We-Neighbour is a smart community management platform designed to improve the daily lives of apartment residents by addressing common challenges such as poor communication, security risks, and lack of engagement. The platform offers real-time safety alerts, allowing residents to report emergencies or maintenance issues instantly. It includes a QR code-based visitor management system to enhance security and streamline guest entry. The resource-sharing system enables residents to lend and borrow items within the community, promoting cost savings and sustainability. Additionally, We-Neighbour features an integrated event calendar, a verified services directory, and a community forum for open discussions, fostering a more connected and informed neighborhood. The user-friendly mobile application ensures that all these features are easily accessible, providing a seamless and efficient way for residents and building managers to stay connected and manage daily operations effectively.",
    technologies: ["Flutter", "Node.js", "MongoDB", "AWS", "Firebase", "QR Code API", "Google Calendar API"],
    features: [
      "Real-time safety alerts and emergency notifications",
      "QR code-based visitor management system for enhanced security",
      "Resource sharing platform for community items",
      "Integrated event calendar with Google Calendar sync",
      "Verified services directory for trusted local providers",
      "Community forum for resident discussions and announcements",
      "Push notifications for important community updates",
      "Admin dashboard for building management",
    ],
    challenges: [
      "Implementing real-time notifications across multiple platforms",
      "Designing a secure and user-friendly visitor management system",
      "Creating scalable backend architecture for multiple communities",
      "Ensuring cross-platform compatibility between iOS and Android",
      "Integrating multiple third-party APIs seamlessly",
      "Managing user permissions and community-specific data",
    ],
    learnings: [
      "Flutter development for cross-platform mobile applications",
      "Real-time communication implementation with WebSockets",
      "Cloud services integration with AWS and Firebase",
      "QR code generation and scanning functionality",
      "Team collaboration and agile development methodologies",
      "Database design for multi-tenant applications",
      "Push notification implementation across platforms",
      "API integration and third-party service management",
    ],
    liveLink: "https://www.weneighbour.live/",
    githubLink: "https://github.com/alwaysPasindu/we_neighbour_project",
  },
  {
    id: 4,
    title: "Real-Time Event Ticketing System",
    description:
      "A concurrent ticketing system that allows vendors to release tickets and customers to purchase them in real-time.",
    image: "/assets/event.png",
    category: "Individual Projects",
    details:
      "This system implements the Producer-Consumer pattern using multi-threading to handle concurrent ticket releases and purchases efficiently. Built with React for a dynamic front-end and Spring Boot for a robust backend, it ensures data integrity and real-time updates. The system supports configurable ticket release and retrieval rates, logging, and error handling. Users can monitor available tickets through a user-friendly dashboard, and the backend periodically updates the front-end using polling mechanisms. The database stores transaction history, providing insights into ticket sales and purchase trends.",
    technologies: ["React", "Spring Boot", "OOP", "Java", "REST API", "Periodic Polling"],
    features: [
      "Real-time ticket availability monitoring",
      "Concurrent ticket purchase handling with thread safety",
      "Configurable ticket release and retrieval rates",
      "User-friendly dashboard for ticket monitoring",
      "Transaction history and sales analytics",
      "Error handling and logging system",
      "Periodic polling for real-time updates",
      "Admin controls for system configuration",
    ],
    challenges: [
      "Implementing thread-safe operations for concurrent ticket handling",
      "Ensuring data integrity during high-volume transactions",
      "Optimizing polling mechanisms for real-time updates",
      "Handling race conditions in ticket purchasing",
      "Creating efficient database queries for transaction history",
      "Implementing proper error handling for system reliability",
    ],
    learnings: [
      "Multi-threading and concurrency control in Java",
      "Producer-Consumer pattern implementation",
      "Spring Boot framework for enterprise applications",
      "Thread safety and synchronization techniques",
      "Real-time system design and architecture",
      "Database transaction management",
      "REST API design for real-time applications",
      "System monitoring and logging best practices",
    ],
    liveLink: "https://event-ticketing-realtime.vercel.app/",
    githubLink: "https://github.com/Jehanfernando02/RealTime-Event-Ticketing-Platform",
  },
  {
    id: 5,
    title: "BookStore",
    description:
      "A full-stack e-commerce application for managing books, authors, carts, and orders, featuring a RESTful API backend and a responsive React frontend.",
    image: "/assets/libronest.png",
    category: "Individual Projects",
    details:
      "BookStore is an online bookstore platform that allows users to browse, add, and manage books and authors, maintain a shopping cart, and place orders. The backend, built with Java, Jersey, and Jetty, provides a REST API with endpoints for CRUD operations on books, authors, customers, carts, and orders, using an in-memory storage system. The frontend, developed with React and Tailwind CSS, offers an intuitive UI for interacting with the API. Key features include CORS support for cross-origin requests, Swagger documentation for API exploration, and sample data initialization for testing. The backend is deployed on Render, and the frontend is hosted on Vercel, with ongoing efforts to resolve deployment issues related to Docker and CORS configuration.",
    technologies: [
      "Java",
      "Jersey",
      "Jetty",
      "Maven",
      "React",
      "Tailwind CSS",
      "Swagger",
      "Docker",
      "Render",
      "Vercel",
    ],
    features: [
      "Complete book catalog management with CRUD operations",
      "Author management and book-author relationships",
      "Shopping cart functionality with item management",
      "Order processing and history tracking",
      "Swagger API documentation for easy testing",
      "Responsive React frontend with Tailwind CSS",
      "CORS support for cross-origin requests",
      "Sample data initialization for testing",
    ],
    challenges: [
      "Implementing RESTful API design principles with Jersey",
      "Managing complex relationships between books, authors, and orders",
      "Handling CORS configuration for cross-origin requests",
      "Docker containerization and deployment challenges",
      "In-memory data management and persistence",
      "Frontend-backend integration and API consumption",
    ],
    learnings: [
      "JAX-RS with Jersey framework for REST API development",
      "Jetty server configuration and deployment",
      "Maven project management and dependency handling",
      "Swagger documentation for API specification",
      "Docker containerization for Java applications",
      "CORS configuration and security considerations",
      "Full-stack application architecture and design",
      "Cloud deployment with Render and Vercel",
    ],
    liveLink: "https://libro-nest.vercel.app/",
    githubLink: "https://github.com/Jehanfernando02/Bookstore",
  },
  {
    id: 6,
    title: "Plane Ticket Management",
    description:
      "A full-stack application for managing airplane seat reservations, featuring a RESTful API backend and a responsive React frontend for booking, canceling, and searching seats.",
    image: "/assets/plane-ticket.png",
    category: "Individual Projects",
    details:
      "Plane Management is an application that enables users to manage airplane seat reservations, including booking, canceling, and searching for seats, as well as viewing the seating plan and ticket information. The backend, built with Spring Boot, provides a REST API with endpoints for retrieving the seating plan, booking/canceling seats, finding the first available seat, and managing tickets, using an in-memory data structure. The frontend, developed with React and Tailwind CSS, offers an intuitive UI with features like a visual seat map, forms for booking and canceling seats, and ticket search functionality. Key features include input validation, dynamic pricing based on seat position, light/dark theme support, and CORS for cross-origin requests. The backend is deployed on Render, and the frontend is hosted on Vercel.",
    technologies: ["Java", "Spring Boot", "React", "Tailwind CSS", "Fetch API", "Render", "Vercel"],
    features: [
      "Interactive visual seat map for seat selection",
      "Real-time seat availability checking",
      "Dynamic pricing based on seat position and class",
      "Booking and cancellation functionality",
      "Ticket search and management system",
      "Input validation for booking forms",
      "Light/dark theme support",
      "Responsive design for all devices",
    ],
    challenges: [
      "Creating an intuitive visual seat map interface",
      "Implementing real-time seat availability updates",
      "Managing complex seat booking logic and validation",
      "Designing dynamic pricing algorithms",
      "Ensuring data consistency for concurrent bookings",
      "Creating responsive design for seat map visualization",
    ],
    learnings: [
      "Spring Boot framework for rapid application development",
      "React component design for complex UI interactions",
      "State management for real-time data updates",
      "Form validation and user input handling",
      "Responsive design techniques for complex layouts",
      "API design for booking and reservation systems",
      "Theme implementation and user preference management",
      "Deployment strategies for full-stack applications",
    ],
    liveLink: "https://plane-ticket-management.vercel.app/",
    githubLink: "https://github.com/Jehanfernando02/Plane-Ticket-Management",
  },
  {
    id: 7,
    title: "Sri Lankan Supper Club (Ongoing)",
    description:
      "A vibrant event planning application tailored for Sri Lankan cultural celebrations, featuring supper plan generation, shopping lists, and a community feast board.",
    image: "/assets/supper.png",
    category: "Ongoing Individual Projects",
    details:
      "Sri Lankan Supper Club offers a delightful way to plan events with culturally rich supper plans, including menus, ambience, and music for occasions like Avurudu, Vesak, and weddings. It includes a dynamic shopping list generator, a feast board for sharing plans, event preparation timelines, and a festival calendar, all enhanced with smooth animations and responsive design.",
    technologies: [
      "React",
      "Node.js",
      "Express",
      "MongoDB",
      "Mongoose",
      "Axios",
      "Framer Motion",
      "Tailwind CSS",
      "JavaScript (ES6+)",
    ],
    features: [
      "Cultural event planning for Sri Lankan celebrations",
      "Dynamic menu generation based on occasion type",
      "Shopping list generator with ingredient calculations",
      "Community feast board for sharing event plans",
      "Event preparation timeline and task management",
      "Festival calendar with cultural significance",
      "Smooth animations with Framer Motion",
      "Recipe suggestions and cooking instructions",
    ],
    challenges: [
      "Researching and implementing authentic Sri Lankan cultural elements",
      "Creating dynamic menu generation algorithms",
      "Implementing complex animation sequences",
      "Managing cultural data and festival information",
      "Creating engaging user experience for cultural content",
      "Balancing traditional elements with modern UI design",
    ],
    learnings: [
      "Cultural research and authentic content creation",
      "Advanced animation techniques with Framer Motion",
      "MongoDB database design for cultural content",
      "Express.js server development and API creation",
      "User experience design for cultural applications",
      "Content management for dynamic cultural data",
      "Community features and user-generated content",
      "Responsive design for cultural applications",
    ],
    liveLink: "/",
    githubLink: "https://github.com/Jehanfernando02/Supper-Club",
  },
  {
    id: 8,
    title: "Aqua Life",
    description:
      "A website raising awareness about SDG 14, promoting ocean conservation and sustainable use of marine resources.",
    image: "/assets/aqua.png",
    category: "Group Projects",
    details:
      "Aqua Life is a collaborative group project aimed at highlighting SDG 14. It features a splash screen introducing the mission to protect marine life, a home page with a navigation bar and oceanic theme, an interactive gallery showcasing marine ecosystems, a shop offering eco-friendly products to support ocean conservation, a progressive user profile for environmental enthusiasts, a feedback form for visitor input, an SVG sitemap, and a team page detailing our contributions. Each member created a content page exploring topics like marine pollution and sustainable fishing, enhanced with a custom page editor.",
    technologies: ["HTML", "CSS", "JavaScript"],
    features: [
      "Interactive splash screen with ocean conservation mission",
      "Oceanic-themed navigation and visual design",
      "Interactive gallery showcasing marine ecosystems",
      "Eco-friendly product shop for conservation support",
      "Progressive user profile system",
      "Feedback form for visitor engagement",
      "SVG sitemap for easy navigation",
      "Educational content on marine conservation",
    ],
    challenges: [
      "Creating engaging educational content about ocean conservation",
      "Implementing interactive gallery with smooth animations",
      "Designing oceanic theme with appropriate color schemes",
      "Coordinating team contributions and content integration",
      "Creating responsive design with vanilla CSS",
      "Implementing custom page editor functionality",
    ],
    learnings: [
      "Environmental awareness and SDG 14 research",
      "Vanilla JavaScript for interactive web features",
      "CSS animations and oceanic theme design",
      "Team collaboration and project coordination",
      "Educational content creation and presentation",
      "SVG graphics and interactive elements",
      "User engagement strategies for awareness campaigns",
      "Web accessibility for educational content",
    ],
    liveLink: "http://aqualife.kesug.com/",
    githubLink: "https://github.com/nethsuka/WDGP_coursework",
  },
//   {
//     id: 9,
//     title: "Trello Clone",
//     description: "A task management app with draggable task cards, customizable boards, and real-time updates.",
//     image: "/assets/task.jpg",
//     category: "Ongoing Individual Projects",
//     details:
//       "This Trello Clone provides an efficient way to organize and track tasks using a Kanban-style interface. Users can create multiple boards, add lists to categorize tasks, and use draggable task cards for seamless workflow management. The app leverages React DnD for drag-and-drop interactions, Redux for state management, and local storage for data persistence. With a clean, responsive UI built using Tailwind CSS, it ensures an optimized experience across devices. Future enhancements may include user authentication, real-time collaboration, and backend integration for cloud storage.",
//     technologies: ["React", "React DnD", "Redux", "Tailwind CSS", "Local Storage", "Context API"],
//     features: [
//       "Kanban-style board interface for task organization",
//       "Drag-and-drop functionality for task cards",
//       "Multiple board creation and management",
//       "List categorization for task organization",
//       "Local storage for data persistence",
//       "Responsive design for all devices",
//       "Task editing and deletion capabilities",
//       "Board customization options",
//     ],
//     challenges: [
//       "Implementing smooth drag-and-drop interactions",
//       "Managing complex state for multiple boards and tasks",
//       "Creating intuitive user interface for task management",
//       "Handling data persistence with local storage",
//       "Ensuring responsive design for drag-and-drop on mobile",
//       "Optimizing performance for large numbers of tasks",
//     ],
//     learnings: [
//       "React DnD library for drag-and-drop functionality",
//       "Redux for complex state management",
//       "Local storage API for client-side data persistence",
//       "Kanban methodology and task management principles",
//       "Performance optimization for interactive applications",
//       "User experience design for productivity tools",
//       "Component architecture for scalable React applications",
//       "Responsive design for touch interfaces",
//     ],

//     liveLink: "https://trello-clone-ex.vercel.app/",
//     githubLink: "https://github.com/Jehanfernando02/Task-Manager",
//   },
]
